{"ast":null,"code":"var _jsxFileName = \"/Users/omkar/Documents/unified resources/mvp/gdrive link opener/video-player-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from 'react';\n// import ReactPlayer from 'react-player';\n// import screenfull from 'screenfull';\n// import './App.css';\n\n// const App = () => {\n//   const [playing, setPlaying] = useState(false);\n//   const [volume, setVolume] = useState(0.5);\n//   const [boostVolume, setBoostVolume] = useState(1);\n//   const [aspectRatio, setAspectRatio] = useState('16:9');\n//   const [fullScreen, setFullScreen] = useState(false);\n//   const [fileUrl, setFileUrl] = useState('');\n//   const [controlVisible, setControlVisible] = useState(true);\n//   const [playbackRate, setPlaybackRate] = useState(1);\n//   const [progress, setProgress] = useState(0);\n\n//   const playerRef = useRef(null);\n//   const containerRef = useRef(null);\n//   const audioContextRef = useRef(null);\n//   const gainNodeRef = useRef(null);\n//   const controlTimeout = useRef(null);\n\n//   useEffect(() => {\n//     // Initialize Web Audio API\n//     audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n//     gainNodeRef.current = audioContextRef.current.createGain();\n//     gainNodeRef.current.gain.value = 1; // Default to 1x volume\n\n//     // Auto-hide controls after 5 seconds of inactivity\n//     const resetControlTimeout = () => {\n//       if (controlTimeout.current) clearTimeout(controlTimeout.current);\n//       setControlVisible(true);\n//       controlTimeout.current = setTimeout(() => setControlVisible(false), 5000);\n//     };\n\n//     document.addEventListener('mousemove', resetControlTimeout);\n//     document.addEventListener('keydown', resetControlTimeout);\n\n//     return () => {\n//       document.removeEventListener('mousemove', resetControlTimeout);\n//       document.removeEventListener('keydown', resetControlTimeout);\n//     };\n//   }, []);\n\n//   const connectAudioNode = () => {\n//     if (playerRef.current && playerRef.current.getInternalPlayer()) {\n//       const audioSource = audioContextRef.current.createMediaElementSource(playerRef.current.getInternalPlayer());\n//       audioSource.connect(gainNodeRef.current).connect(audioContextRef.current.destination);\n//     }\n//   };\n\n//   const handlePlayPause = () => {\n//     setPlaying(!playing);\n//   };\n\n//   const handleVolumeChange = (e) => {\n//     const newVolume = parseFloat(e.target.value);\n//     setVolume(newVolume);\n//     gainNodeRef.current.gain.value = newVolume * boostVolume;\n//   };\n\n//   const handleBoostVolume = () => {\n//     const newBoost = boostVolume >= 2 ? 1 : boostVolume + 0.5;\n//     setBoostVolume(newBoost);\n//     gainNodeRef.current.gain.value = volume * newBoost;\n//   };\n\n//   const handleAspectRatio = (ratio) => {\n//     setAspectRatio(ratio);\n//   };\n\n//   const handleFullScreen = () => {\n//     if (screenfull.isEnabled) {\n//       screenfull.toggle(containerRef.current);\n//     }\n//     setFullScreen(!fullScreen);\n//   };\n\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       const url = URL.createObjectURL(file);\n//       setFileUrl(url);\n//       setPlaying(true); // Start playing immediately after loading the file\n//       extractSubtitles(file);\n//     }\n//   };\n\n//   const handleProgressChange = (played) => {\n//     setProgress(played.played * 100);\n//   };\n\n//   const handleSeek = (e) => {\n//     const seekTo = (e.target.value / 100) * playerRef.current.getDuration();\n//     playerRef.current.seekTo(seekTo, 'seconds');\n//     setProgress(e.target.value);\n//   };\n\n//   const handlePlaybackRate = (rate) => {\n//     setPlaybackRate(rate);\n//     if (playerRef.current) {\n//       playerRef.current.getInternalPlayer().playbackRate = rate;\n//     }\n//   };\n\n//   const extractSubtitles = (file) => {\n//     const video = document.createElement('video');\n//     video.src = URL.createObjectURL(file);\n\n//     video.onloadedmetadata = () => {\n//       const tracks = [];\n//       for (let i = 0; i < video.textTracks.length; i++) {\n//         tracks.push({\n//           label: video.textTracks[i].label || `Subtitle ${i + 1}`,\n//           index: i\n//         });\n//       }\n//     };\n//   };\n\n//   const handleSubtitleChange = (e) => {\n//     const selectedTrackIndex = parseInt(e.target.value, 10);\n\n//     // Show selected subtitle and hide others\n//     const video = playerRef.current.getInternalPlayer();\n//     for (let i = 0; i < video.textTracks.length; i++) {\n//       video.textTracks[i].mode = i === selectedTrackIndex ? 'showing' : 'disabled';\n//     }\n//   };\n\n//   return (\n//     <div ref={containerRef} className=\"video-player-container\" onMouseMove={() => setControlVisible(true)}>\n//       {/* File Picker */}\n//       <div className=\"file-picker\">\n//         <input type=\"file\" accept=\"video/*\" onChange={handleFileChange} />\n//       </div>\n\n//       {/* Video Player */}\n//       {fileUrl && (\n//         <ReactPlayer\n//           ref={playerRef}\n//           url={fileUrl}\n//           playing={playing}\n//           volume={volume}\n//           playbackRate={playbackRate}\n//           onPlay={connectAudioNode} // Connect the audio node when playback starts\n//           onProgress={handleProgressChange}\n//           width=\"100%\"\n//           height={aspectRatio === '16:9' ? '56.25%' : aspectRatio === '4:3' ? '75%' : '100%'}\n//           controls={false}\n//         />\n//       )}\n\n//       {/* Controls */}\n//       {controlVisible && (\n//         <div className=\"controls\">\n//           <button className=\"control-button\" onClick={handlePlayPause}>\n//             {playing ? 'Pause' : 'Play'}\n//           </button>\n\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('16:9')}>16:9</button>\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('4:3')}>4:3</button>\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('1:1')}>1:1</button>\n\n//           <div className=\"volume-container\">\n//             <input\n//               className=\"volume-slider\"\n//               type=\"range\"\n//               min=\"0\"\n//               max=\"1\"\n//               step=\"0.01\"\n//               value={volume}\n//               onChange={handleVolumeChange}\n//             />\n//             <button className=\"control-button boost-button\" onClick={handleBoostVolume}>Boost Volume ({boostVolume}x)</button>\n//           </div>\n\n//           <div className=\"playback-controls\">\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(1)}>1x</button>\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(1.5)}>1.5x</button>\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(2)}>2x</button>\n//           </div>\n\n//           <input\n//             className=\"progress-bar\"\n//             type=\"range\"\n//             min=\"0\"\n//             max=\"100\"\n//             step=\"0.1\"\n//             value={progress}\n//             onChange={handleSeek}\n//           />\n\n//           <button className=\"control-button\" onClick={handleFullScreen}>\n//             {fullScreen ? 'Exit Fullscreen' : 'Fullscreen'}\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactPlayer from 'react-player';\nimport screenfull from 'screenfull';\nimport './App.css';\n\n// File handling and sorting\nimport { openFileDialog, openFolderDialog } from './fileUtils'; // Utility functions to handle file & folder opening\nimport { getSortedVideoFiles } from './fileSorter'; // Utility function for sorting files\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [playing, setPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.5);\n  const [boostVolume, setBoostVolume] = useState(1);\n  const [aspectRatio, setAspectRatio] = useState('16:9');\n  const [fullScreen, setFullScreen] = useState(false);\n  const [fileUrl, setFileUrl] = useState('');\n  const [controlVisible, setControlVisible] = useState(true);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [progress, setProgress] = useState(0);\n  const [subtitleTracks, setSubtitleTracks] = useState([]);\n  const [selectedSubtitle, setSelectedSubtitle] = useState(null);\n  const [theme, setTheme] = useState({\n    color: '#00ff00',\n    background: '#000'\n  }); // Button theme\n  const [selectedFolder, setSelectedFolder] = useState(null);\n  const [fileListPopupVisible, setFileListPopupVisible] = useState(false); // Folder file listing\n  const [videoFiles, setVideoFiles] = useState([]); // Video files inside selected folder\n  const [settingsVisible, setSettingsVisible] = useState(false); // Settings popup visibility\n\n  const playerRef = useRef(null);\n  const containerRef = useRef(null);\n  const controlTimeout = useRef(null);\n  const sidebarRef = useRef(null); // Sidebar ref for auto-hide\n\n  useEffect(() => {\n    // Auto-hide controls after 5 seconds of inactivity\n    const resetControlTimeout = () => {\n      if (controlTimeout.current) clearTimeout(controlTimeout.current);\n      setControlVisible(true);\n      controlTimeout.current = setTimeout(() => setControlVisible(false), 5000);\n    };\n    document.addEventListener('mousemove', resetControlTimeout);\n    document.addEventListener('keydown', resetControlTimeout);\n    return () => {\n      document.removeEventListener('mousemove', resetControlTimeout);\n      document.removeEventListener('keydown', resetControlTimeout);\n    };\n  }, []);\n\n  // Handle sidebar auto-hide after 5 seconds\n  const handleSidebarActivity = () => {\n    if (controlTimeout.current) clearTimeout(controlTimeout.current);\n    sidebarRef.current.style.visibility = 'visible';\n    controlTimeout.current = setTimeout(() => {\n      sidebarRef.current.style.visibility = 'hidden';\n    }, 5000);\n  };\n  const handlePlayPause = () => setPlaying(!playing);\n  const handleFileChange = async () => {\n    const file = await openFileDialog(); // Open file dialog utility\n    if (file) {\n      const url = URL.createObjectURL(file);\n      setFileUrl(url);\n      setPlaying(true); // Start playing immediately\n    }\n  };\n  const handleFolderChange = async () => {\n    const folder = await openFolderDialog(); // Open folder dialog utility\n    if (folder) {\n      const sortedFiles = getSortedVideoFiles(folder); // Collect and sort video files\n      setVideoFiles(sortedFiles);\n      setSelectedFolder(folder);\n      setFileListPopupVisible(true); // Show file list popup\n    }\n  };\n  const handleProgressChange = played => setProgress(played.played * 100);\n  const handleSeek = e => {\n    const seekTo = e.target.value / 100 * playerRef.current.getDuration();\n    playerRef.current.seekTo(seekTo, 'seconds');\n    setProgress(e.target.value);\n  };\n  const handlePlaybackRate = rate => {\n    setPlaybackRate(rate);\n    playerRef.current.getInternalPlayer().playbackRate = rate;\n  };\n  const handleFileClick = file => {\n    const url = URL.createObjectURL(file);\n    setFileUrl(url);\n    setPlaying(true);\n    setFileListPopupVisible(false); // Hide file list after selection\n  };\n  const handleSettingsChange = newTheme => setTheme(newTheme); // Update button colors and theme\n\n  const handleOpenSettings = () => setSettingsVisible(true);\n  const handleCloseSettings = () => setSettingsVisible(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"video-player-container\",\n    onMouseMove: handleSidebarActivity,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: sidebarRef,\n      className: \"hamburger-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hamburger-icon\",\n        onClick: handleSidebarActivity,\n        children: \"\\u2630\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileChange,\n          children: \"Open File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFolderChange,\n          children: \"Open Folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), selectedFolder && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Selected Folder: \", selectedFolder.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOpenSettings,\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(ReactPlayer, {\n      ref: playerRef,\n      url: fileUrl,\n      playing: playing,\n      volume: volume,\n      playbackRate: playbackRate,\n      onProgress: handleProgressChange,\n      width: \"100%\",\n      height: aspectRatio === '16:9' ? '56.25%' : aspectRatio === '4:3' ? '75%' : '100%',\n      controls: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this), fileListPopupVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-list-popup\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"File Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Size\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date Modified\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: videoFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            onDoubleClick: () => handleFileClick(file),\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: file.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: file.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [(file.size / (1024 * 1024)).toFixed(2), \" MB\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(file.lastModified).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this), settingsVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Button Color:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: theme.color,\n          onChange: e => handleSettingsChange({\n            ...theme,\n            color: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Background Color:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: theme.background,\n          onChange: e => handleSettingsChange({\n            ...theme,\n            background: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseSettings,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Ayv2xDfTaKiMczsSellVnND9E1A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactPlayer","screenfull","openFileDialog","openFolderDialog","getSortedVideoFiles","jsxDEV","_jsxDEV","App","_s","playing","setPlaying","volume","setVolume","boostVolume","setBoostVolume","aspectRatio","setAspectRatio","fullScreen","setFullScreen","fileUrl","setFileUrl","controlVisible","setControlVisible","playbackRate","setPlaybackRate","progress","setProgress","subtitleTracks","setSubtitleTracks","selectedSubtitle","setSelectedSubtitle","theme","setTheme","color","background","selectedFolder","setSelectedFolder","fileListPopupVisible","setFileListPopupVisible","videoFiles","setVideoFiles","settingsVisible","setSettingsVisible","playerRef","containerRef","controlTimeout","sidebarRef","resetControlTimeout","current","clearTimeout","setTimeout","document","addEventListener","removeEventListener","handleSidebarActivity","style","visibility","handlePlayPause","handleFileChange","file","url","URL","createObjectURL","handleFolderChange","folder","sortedFiles","handleProgressChange","played","handleSeek","e","seekTo","target","value","getDuration","handlePlaybackRate","rate","getInternalPlayer","handleFileClick","handleSettingsChange","newTheme","handleOpenSettings","handleCloseSettings","ref","className","onMouseMove","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","name","onProgress","width","height","controls","map","index","onDoubleClick","type","size","toFixed","Date","lastModified","toLocaleDateString","onChange","_c","$RefreshReg$"],"sources":["/Users/omkar/Documents/unified resources/mvp/gdrive link opener/video-player-app/src/App.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import ReactPlayer from 'react-player';\n// import screenfull from 'screenfull';\n// import './App.css';\n\n// const App = () => {\n//   const [playing, setPlaying] = useState(false);\n//   const [volume, setVolume] = useState(0.5);\n//   const [boostVolume, setBoostVolume] = useState(1);\n//   const [aspectRatio, setAspectRatio] = useState('16:9');\n//   const [fullScreen, setFullScreen] = useState(false);\n//   const [fileUrl, setFileUrl] = useState('');\n//   const [controlVisible, setControlVisible] = useState(true);\n//   const [playbackRate, setPlaybackRate] = useState(1);\n//   const [progress, setProgress] = useState(0);\n\n//   const playerRef = useRef(null);\n//   const containerRef = useRef(null);\n//   const audioContextRef = useRef(null);\n//   const gainNodeRef = useRef(null);\n//   const controlTimeout = useRef(null);\n\n//   useEffect(() => {\n//     // Initialize Web Audio API\n//     audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n//     gainNodeRef.current = audioContextRef.current.createGain();\n//     gainNodeRef.current.gain.value = 1; // Default to 1x volume\n\n//     // Auto-hide controls after 5 seconds of inactivity\n//     const resetControlTimeout = () => {\n//       if (controlTimeout.current) clearTimeout(controlTimeout.current);\n//       setControlVisible(true);\n//       controlTimeout.current = setTimeout(() => setControlVisible(false), 5000);\n//     };\n\n//     document.addEventListener('mousemove', resetControlTimeout);\n//     document.addEventListener('keydown', resetControlTimeout);\n\n//     return () => {\n//       document.removeEventListener('mousemove', resetControlTimeout);\n//       document.removeEventListener('keydown', resetControlTimeout);\n//     };\n//   }, []);\n\n//   const connectAudioNode = () => {\n//     if (playerRef.current && playerRef.current.getInternalPlayer()) {\n//       const audioSource = audioContextRef.current.createMediaElementSource(playerRef.current.getInternalPlayer());\n//       audioSource.connect(gainNodeRef.current).connect(audioContextRef.current.destination);\n//     }\n//   };\n\n//   const handlePlayPause = () => {\n//     setPlaying(!playing);\n//   };\n\n//   const handleVolumeChange = (e) => {\n//     const newVolume = parseFloat(e.target.value);\n//     setVolume(newVolume);\n//     gainNodeRef.current.gain.value = newVolume * boostVolume;\n//   };\n\n//   const handleBoostVolume = () => {\n//     const newBoost = boostVolume >= 2 ? 1 : boostVolume + 0.5;\n//     setBoostVolume(newBoost);\n//     gainNodeRef.current.gain.value = volume * newBoost;\n//   };\n\n//   const handleAspectRatio = (ratio) => {\n//     setAspectRatio(ratio);\n//   };\n\n//   const handleFullScreen = () => {\n//     if (screenfull.isEnabled) {\n//       screenfull.toggle(containerRef.current);\n//     }\n//     setFullScreen(!fullScreen);\n//   };\n\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       const url = URL.createObjectURL(file);\n//       setFileUrl(url);\n//       setPlaying(true); // Start playing immediately after loading the file\n//       extractSubtitles(file);\n//     }\n//   };\n\n//   const handleProgressChange = (played) => {\n//     setProgress(played.played * 100);\n//   };\n\n//   const handleSeek = (e) => {\n//     const seekTo = (e.target.value / 100) * playerRef.current.getDuration();\n//     playerRef.current.seekTo(seekTo, 'seconds');\n//     setProgress(e.target.value);\n//   };\n\n//   const handlePlaybackRate = (rate) => {\n//     setPlaybackRate(rate);\n//     if (playerRef.current) {\n//       playerRef.current.getInternalPlayer().playbackRate = rate;\n//     }\n//   };\n\n//   const extractSubtitles = (file) => {\n//     const video = document.createElement('video');\n//     video.src = URL.createObjectURL(file);\n\n//     video.onloadedmetadata = () => {\n//       const tracks = [];\n//       for (let i = 0; i < video.textTracks.length; i++) {\n//         tracks.push({\n//           label: video.textTracks[i].label || `Subtitle ${i + 1}`,\n//           index: i\n//         });\n//       }\n//     };\n//   };\n\n//   const handleSubtitleChange = (e) => {\n//     const selectedTrackIndex = parseInt(e.target.value, 10);\n\n//     // Show selected subtitle and hide others\n//     const video = playerRef.current.getInternalPlayer();\n//     for (let i = 0; i < video.textTracks.length; i++) {\n//       video.textTracks[i].mode = i === selectedTrackIndex ? 'showing' : 'disabled';\n//     }\n//   };\n\n//   return (\n//     <div ref={containerRef} className=\"video-player-container\" onMouseMove={() => setControlVisible(true)}>\n//       {/* File Picker */}\n//       <div className=\"file-picker\">\n//         <input type=\"file\" accept=\"video/*\" onChange={handleFileChange} />\n//       </div>\n\n//       {/* Video Player */}\n//       {fileUrl && (\n//         <ReactPlayer\n//           ref={playerRef}\n//           url={fileUrl}\n//           playing={playing}\n//           volume={volume}\n//           playbackRate={playbackRate}\n//           onPlay={connectAudioNode} // Connect the audio node when playback starts\n//           onProgress={handleProgressChange}\n//           width=\"100%\"\n//           height={aspectRatio === '16:9' ? '56.25%' : aspectRatio === '4:3' ? '75%' : '100%'}\n//           controls={false}\n//         />\n//       )}\n\n//       {/* Controls */}\n//       {controlVisible && (\n//         <div className=\"controls\">\n//           <button className=\"control-button\" onClick={handlePlayPause}>\n//             {playing ? 'Pause' : 'Play'}\n//           </button>\n\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('16:9')}>16:9</button>\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('4:3')}>4:3</button>\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('1:1')}>1:1</button>\n\n//           <div className=\"volume-container\">\n//             <input\n//               className=\"volume-slider\"\n//               type=\"range\"\n//               min=\"0\"\n//               max=\"1\"\n//               step=\"0.01\"\n//               value={volume}\n//               onChange={handleVolumeChange}\n//             />\n//             <button className=\"control-button boost-button\" onClick={handleBoostVolume}>Boost Volume ({boostVolume}x)</button>\n//           </div>\n\n//           <div className=\"playback-controls\">\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(1)}>1x</button>\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(1.5)}>1.5x</button>\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(2)}>2x</button>\n//           </div>\n\n//           <input\n//             className=\"progress-bar\"\n//             type=\"range\"\n//             min=\"0\"\n//             max=\"100\"\n//             step=\"0.1\"\n//             value={progress}\n//             onChange={handleSeek}\n//           />\n\n\n//           <button className=\"control-button\" onClick={handleFullScreen}>\n//             {fullScreen ? 'Exit Fullscreen' : 'Fullscreen'}\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactPlayer from 'react-player';\nimport screenfull from 'screenfull';\nimport './App.css';\n\n// File handling and sorting\nimport { openFileDialog, openFolderDialog } from './fileUtils'; // Utility functions to handle file & folder opening\nimport { getSortedVideoFiles } from './fileSorter'; // Utility function for sorting files\n\nconst App = () => {\n  const [playing, setPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.5);\n  const [boostVolume, setBoostVolume] = useState(1);\n  const [aspectRatio, setAspectRatio] = useState('16:9');\n  const [fullScreen, setFullScreen] = useState(false);\n  const [fileUrl, setFileUrl] = useState('');\n  const [controlVisible, setControlVisible] = useState(true);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [progress, setProgress] = useState(0);\n  const [subtitleTracks, setSubtitleTracks] = useState([]);\n  const [selectedSubtitle, setSelectedSubtitle] = useState(null);\n  const [theme, setTheme] = useState({ color: '#00ff00', background: '#000' }); // Button theme\n  const [selectedFolder, setSelectedFolder] = useState(null);\n  const [fileListPopupVisible, setFileListPopupVisible] = useState(false); // Folder file listing\n  const [videoFiles, setVideoFiles] = useState([]); // Video files inside selected folder\n  const [settingsVisible, setSettingsVisible] = useState(false); // Settings popup visibility\n\n  const playerRef = useRef(null);\n  const containerRef = useRef(null);\n  const controlTimeout = useRef(null);\n  const sidebarRef = useRef(null); // Sidebar ref for auto-hide\n\n  useEffect(() => {\n    // Auto-hide controls after 5 seconds of inactivity\n    const resetControlTimeout = () => {\n      if (controlTimeout.current) clearTimeout(controlTimeout.current);\n      setControlVisible(true);\n      controlTimeout.current = setTimeout(() => setControlVisible(false), 5000);\n    };\n\n    document.addEventListener('mousemove', resetControlTimeout);\n    document.addEventListener('keydown', resetControlTimeout);\n\n    return () => {\n      document.removeEventListener('mousemove', resetControlTimeout);\n      document.removeEventListener('keydown', resetControlTimeout);\n    };\n  }, []);\n\n  // Handle sidebar auto-hide after 5 seconds\n  const handleSidebarActivity = () => {\n    if (controlTimeout.current) clearTimeout(controlTimeout.current);\n    sidebarRef.current.style.visibility = 'visible';\n    controlTimeout.current = setTimeout(() => {\n      sidebarRef.current.style.visibility = 'hidden';\n    }, 5000);\n  };\n\n  const handlePlayPause = () => setPlaying(!playing);\n\n  const handleFileChange = async () => {\n    const file = await openFileDialog(); // Open file dialog utility\n    if (file) {\n      const url = URL.createObjectURL(file);\n      setFileUrl(url);\n      setPlaying(true); // Start playing immediately\n    }\n  };\n\n  const handleFolderChange = async () => {\n    const folder = await openFolderDialog(); // Open folder dialog utility\n    if (folder) {\n      const sortedFiles = getSortedVideoFiles(folder); // Collect and sort video files\n      setVideoFiles(sortedFiles);\n      setSelectedFolder(folder);\n      setFileListPopupVisible(true); // Show file list popup\n    }\n  };\n\n  const handleProgressChange = (played) => setProgress(played.played * 100);\n\n  const handleSeek = (e) => {\n    const seekTo = (e.target.value / 100) * playerRef.current.getDuration();\n    playerRef.current.seekTo(seekTo, 'seconds');\n    setProgress(e.target.value);\n  };\n\n  const handlePlaybackRate = (rate) => {\n    setPlaybackRate(rate);\n    playerRef.current.getInternalPlayer().playbackRate = rate;\n  };\n\n  const handleFileClick = (file) => {\n    const url = URL.createObjectURL(file);\n    setFileUrl(url);\n    setPlaying(true);\n    setFileListPopupVisible(false); // Hide file list after selection\n  };\n\n  const handleSettingsChange = (newTheme) => setTheme(newTheme); // Update button colors and theme\n\n  const handleOpenSettings = () => setSettingsVisible(true);\n  const handleCloseSettings = () => setSettingsVisible(false);\n\n  return (\n    <div ref={containerRef} className=\"video-player-container\" onMouseMove={handleSidebarActivity}>\n      {/* Hamburger Menu */}\n      <div ref={sidebarRef} className=\"hamburger-menu\">\n        <div className=\"hamburger-icon\" onClick={handleSidebarActivity}>☰</div>\n        <div className=\"sidebar\">\n          <button onClick={handleFileChange}>Open File</button>\n          <button onClick={handleFolderChange}>Open Folder</button>\n          {selectedFolder && <div>Selected Folder: {selectedFolder.name}</div>}\n          <button onClick={handleOpenSettings}>Settings</button>\n        </div>\n      </div>\n\n      {/* Video Player */}\n      {fileUrl && (\n        <ReactPlayer\n          ref={playerRef}\n          url={fileUrl}\n          playing={playing}\n          volume={volume}\n          playbackRate={playbackRate}\n          onProgress={handleProgressChange}\n          width=\"100%\"\n          height={aspectRatio === '16:9' ? '56.25%' : aspectRatio === '4:3' ? '75%' : '100%'}\n          controls={false}\n        />\n      )}\n\n      {/* File List Popup */}\n      {fileListPopupVisible && (\n        <div className=\"file-list-popup\">\n          <table>\n            <thead>\n              <tr>\n                <th>File Name</th>\n                <th>Type</th>\n                <th>Size</th>\n                <th>Date Modified</th>\n              </tr>\n            </thead>\n            <tbody>\n              {videoFiles.map((file, index) => (\n                <tr key={index} onDoubleClick={() => handleFileClick(file)}>\n                  <td>{file.name}</td>\n                  <td>{file.type}</td>\n                  <td>{(file.size / (1024 * 1024)).toFixed(2)} MB</td>\n                  <td>{new Date(file.lastModified).toLocaleDateString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {/* Settings Popup */}\n      {settingsVisible && (\n        <div className=\"settings-popup\">\n          <h2>Settings</h2>\n          <label>\n            Button Color:\n            <input\n              type=\"color\"\n              value={theme.color}\n              onChange={(e) => handleSettingsChange({ ...theme, color: e.target.value })}\n            />\n          </label>\n          <label>\n            Background Color:\n            <input\n              type=\"color\"\n              value={theme.background}\n              onChange={(e) => handleSettingsChange({ ...theme, background: e.target.value })}\n            />\n          </label>\n          <button onClick={handleCloseSettings}>Close</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAO,WAAW;;AAElB;AACA,SAASC,cAAc,EAAEC,gBAAgB,QAAQ,aAAa,CAAC,CAAC;AAChE,SAASC,mBAAmB,QAAQ,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}