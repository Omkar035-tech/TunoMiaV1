{"ast":null,"code":"var _jsxFileName = \"/Users/omkar/Documents/unified resources/mvp/gdrive link opener/video-player-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from 'react';\n// import ReactPlayer from 'react-player';\n// import screenfull from 'screenfull';\n// import './App.css';\n\n// const App = () => {\n//   const [playing, setPlaying] = useState(false);\n//   const [volume, setVolume] = useState(0.5);\n//   const [boostVolume, setBoostVolume] = useState(1);\n//   const [aspectRatio, setAspectRatio] = useState('16:9');\n//   const [fullScreen, setFullScreen] = useState(false);\n//   const [fileUrl, setFileUrl] = useState('');\n//   const [controlVisible, setControlVisible] = useState(true);\n//   const [playbackRate, setPlaybackRate] = useState(1);\n//   const [progress, setProgress] = useState(0);\n//   const [subtitleTracks, setSubtitleTracks] = useState([]);\n//   const [selectedSubtitle, setSelectedSubtitle] = useState(null);\n\n//   const playerRef = useRef(null);\n//   const containerRef = useRef(null);\n\n//   const audioContextRef = useRef(null);\n//   const gainNodeRef = useRef(null);\n//   const sourceRef = useRef(null);\n//   const controlTimeout = useRef(null);\n\n//   useEffect(() => {\n//     // Initialize Web Audio API\n//     audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n//     gainNodeRef.current = audioContextRef.current.createGain();\n//     gainNodeRef.current.gain.value = 1; // Default to 1x volume\n\n//     // Auto-hide controls after 5 seconds of inactivity\n//     const resetControlTimeout = () => {\n//       if (controlTimeout.current) clearTimeout(controlTimeout.current);\n//       setControlVisible(true);\n//       controlTimeout.current = setTimeout(() => setControlVisible(false), 5000);\n//     };\n\n//     document.addEventListener('mousemove', resetControlTimeout);\n//     document.addEventListener('keydown', resetControlTimeout);\n\n//     return () => {\n//       document.removeEventListener('mousemove', resetControlTimeout);\n//       document.removeEventListener('keydown', resetControlTimeout);\n//     };\n//   }, []);\n\n//   const connectAudioNode = () => {\n//     if (!sourceRef.current && playerRef.current && playerRef.current.getInternalPlayer()) {\n//       const audioSource = audioContextRef.current.createMediaElementSource(playerRef.current.getInternalPlayer());\n//       sourceRef.current = audioSource;\n//       audioSource.connect(gainNodeRef.current).connect(audioContextRef.current.destination);\n//     }\n//   };\n\n//   // Function to toggle play/pause\n//   const handlePlayPause = () => {\n//     setPlaying(!playing);\n//   };\n\n//   // Function to handle volume change\n//   const handleVolumeChange = (e) => {\n//     setVolume(parseFloat(e.target.value));\n//     gainNodeRef.current.gain.value = parseFloat(e.target.value) * boostVolume;\n//   };\n\n//   // Function to boost volume\n//   const handleBoostVolume = () => {\n//     const newBoost = boostVolume >= 2 ? 1 : boostVolume + 0.5;\n//     setBoostVolume(newBoost);\n//     gainNodeRef.current.gain.value = volume * newBoost;\n//   };\n\n//   // Function to handle aspect ratio\n//   const handleAspectRatio = (ratio) => {\n//     setAspectRatio(ratio);\n//   };\n\n//   // Function to handle full screen\n//   const handleFullScreen = () => {\n//     if (screenfull.isEnabled) {\n//       screenfull.toggle(containerRef.current);\n//     }\n//     setFullScreen(!fullScreen);\n//   };\n\n//   // Function to handle file selection\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFileUrl(URL.createObjectURL(file));\n//       extractSubtitles(file);\n//     }\n//   };\n\n//   // Function to handle progress changes\n//   const handleProgressChange = (played) => {\n//     setProgress(played.played * 100);\n//   };\n\n//   // Function to handle seek\n//   const handleSeek = (e) => {\n//     const seekTo = (e.target.value / 100) * playerRef.current.getDuration();\n//     playerRef.current.seekTo(seekTo, 'seconds');\n//     setProgress(e.target.value);\n//   };\n\n//   // Function to handle playback speed\n//   const handlePlaybackRate = (rate) => {\n//     setPlaybackRate(rate);\n//     playerRef.current.getInternalPlayer().playbackRate = rate;\n//   };\n\n//   // Extract subtitle tracks from video\n//   const extractSubtitles = (file) => {\n//     const video = document.createElement('video');\n//     video.src = URL.createObjectURL(file);\n//     console.log(URL.createObjectURL(file))\n//     video.onloadedmetadata = () => {\n//       const tracks = [];\n//       for (let i = 0; i < video.textTracks.length; i++) {\n//         tracks.push({\n//           label: video.textTracks[i].label || `Subtitle ${i + 1}`,\n//           index: i\n//         });\n//       }\n//       console.log(tracks)\n\n//       // setSubtitleTracks(tracks);\n//       // console.log(tracks);\n//       // setSelectedSubtitle(tracks[0].index); // Default to the first subtitle\n//       // video.textTracks[0].mode = 'showing'; // Show first subtitle\n//     };\n//   };\n\n//   // Change subtitle track\n//   const handleSubtitleChange = (e) => {\n//     const selectedTrackIndex = parseInt(e.target.value, 10);\n//     // setSelectedSubtitle(selectedTrackIndex);\n\n//     // Show selected subtitle and hide others\n//     const video = playerRef.current.getInternalPlayer();\n//     for (let i = 0; i < video.textTracks.length; i++) {\n//       video.textTracks[i].mode = i === selectedTrackIndex ? 'showing' : 'disabled';\n//     }\n//   };\n\n//   return (\n//     <div ref={containerRef} className=\"video-player-container\" onMouseMove={() => setControlVisible(true)}>\n//       {/* File Picker */}\n//       <div className=\"file-picker\">\n//         <input type=\"file\" accept=\"video/*\" onChange={handleFileChange} />\n//       </div>\n\n//       {/* Video Player */}\n//       {fileUrl && (\n//         <ReactPlayer\n//           ref={playerRef}\n//           url={fileUrl}\n//           playing={playing}\n//           volume={volume}\n//           playbackRate={playbackRate}\n//           onPlay={connectAudioNode} // Connect the audio node when playback starts\n//           onProgress={handleProgressChange}\n//           width=\"100%\"\n//           height={aspectRatio === '16:9' ? '56.25%' : aspectRatio === '4:3' ? '75%' : '100%'}\n//           controls={false}\n//         />\n//       )}\n\n//       {/* Controls */}\n//       {controlVisible && (\n//         <div className=\"controls\">\n//           <button className=\"control-button\" onClick={handlePlayPause}>\n//             {playing ? 'Pause' : 'Play'}\n//           </button>\n\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('16:9')}>16:9</button>\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('4:3')}>4:3</button>\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('1:1')}>1:1</button>\n\n//           <div className=\"volume-container\">\n//             <input\n//               className=\"volume-slider\"\n//               type=\"range\"\n//               min=\"0\"\n//               max=\"1\"\n//               step=\"0.01\"\n//               value={volume}\n//               onChange={handleVolumeChange}\n//             />\n//             <button className=\"control-button boost-button\" onClick={handleBoostVolume}>Boost Volume ({boostVolume}x)</button>\n//           </div>\n\n//           <div className=\"playback-controls\">\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(1)}>1x</button>\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(1.5)}>1.5x</button>\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(2)}>2x</button>\n//           </div>\n\n//           <input\n//             className=\"progress-bar\"\n//             type=\"range\"\n//             min=\"0\"\n//             max=\"100\"\n//             step=\"0.1\"\n//             value={progress}\n//             onChange={handleSeek}\n//           />\n\n//           {/* Subtitle Selection */}\n//           {subtitleTracks.length > 0 && (\n//             <select value={selectedSubtitle} onChange={handleSubtitleChange} className=\"control-select\">\n//               {subtitleTracks.map((track) => (\n//                 <option key={track.index} value={track.index}>\n//                   {track.label}\n//                 </option>\n//               ))}\n//             </select>\n//           )}\n\n//           <button className=\"control-button\" onClick={handleFullScreen}>\n//             {fullScreen ? 'Exit Fullscreen' : 'Fullscreen'}\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\nimport './App.css'; // Add your styling here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const videoNode = useRef(null);\n  const player = useRef(null);\n  const [fileUrl, setFileUrl] = useState('');\n  const [subtitleUrl, setSubtitleUrl] = useState(null); // For loading external subtitles\n  const [controlVisible, setControlVisible] = useState(true);\n\n  // Initialize player on component mount\n  useEffect(() => {\n    if (videoNode.current) {\n      player.current = videojs(videoNode.current, {\n        controls: true,\n        autoplay: false,\n        preload: 'auto',\n        fluid: true,\n        // Make the player responsive\n        controlBar: {\n          fullscreenToggle: true\n        }\n      });\n    }\n\n    // Handle subtitle changes (if external subtitles are loaded)\n    if (subtitleUrl && player.current) {\n      player.current.addRemoteTextTrack({\n        kind: 'subtitles',\n        src: subtitleUrl,\n        srclang: 'en',\n        label: 'English',\n        default: true // Show subtitles by default\n      });\n    }\n    return () => {\n      if (player.current) {\n        player.current.dispose(); // Clean up player on component unmount\n      }\n    };\n  }, [subtitleUrl]);\n\n  // Function to handle file change\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const fileUrl = URL.createObjectURL(file);\n      setFileUrl(fileUrl);\n\n      // Check if file has embedded subtitles\n      player.current.src({\n        type: file.type,\n        src: fileUrl\n      });\n      player.current.on('loadedmetadata', () => {\n        const tracks = player.current.textTracks();\n        if (tracks.length === 0) {\n          // You can load an external subtitle file here if needed\n          setSubtitleUrl('/path/to/subtitle-file.vtt'); // Set the URL for the external subtitle\n        } else {\n          console.log('Embedded subtitles found:', tracks);\n        }\n      });\n    }\n  };\n\n  // Auto-hide controls after 5 seconds of inactivity\n  useEffect(() => {\n    const resetControlTimeout = () => {\n      setControlVisible(true);\n      setTimeout(() => setControlVisible(false), 5000);\n    };\n    document.addEventListener('mousemove', resetControlTimeout);\n    return () => {\n      document.removeEventListener('mousemove', resetControlTimeout);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-player-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-picker\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"video/*\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-vjs-player\": true,\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoNode,\n        className: \"video-js vjs-big-play-centered\",\n        controls: true,\n        preload: \"auto\",\n        width: \"640\",\n        height: \"360\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"a80iOrKkJNG97gQcEBMKjEj7niE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","videojs","jsxDEV","_jsxDEV","App","_s","videoNode","player","fileUrl","setFileUrl","subtitleUrl","setSubtitleUrl","controlVisible","setControlVisible","current","controls","autoplay","preload","fluid","controlBar","fullscreenToggle","addRemoteTextTrack","kind","src","srclang","label","default","dispose","handleFileChange","e","file","target","files","URL","createObjectURL","type","on","tracks","textTracks","length","console","log","resetControlTimeout","setTimeout","document","addEventListener","removeEventListener","className","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","_c","$RefreshReg$"],"sources":["/Users/omkar/Documents/unified resources/mvp/gdrive link opener/video-player-app/src/App.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import ReactPlayer from 'react-player';\n// import screenfull from 'screenfull';\n// import './App.css';\n\n// const App = () => {\n//   const [playing, setPlaying] = useState(false);\n//   const [volume, setVolume] = useState(0.5);\n//   const [boostVolume, setBoostVolume] = useState(1);\n//   const [aspectRatio, setAspectRatio] = useState('16:9');\n//   const [fullScreen, setFullScreen] = useState(false);\n//   const [fileUrl, setFileUrl] = useState('');\n//   const [controlVisible, setControlVisible] = useState(true);\n//   const [playbackRate, setPlaybackRate] = useState(1);\n//   const [progress, setProgress] = useState(0);\n//   const [subtitleTracks, setSubtitleTracks] = useState([]);\n//   const [selectedSubtitle, setSelectedSubtitle] = useState(null);\n\n//   const playerRef = useRef(null);\n//   const containerRef = useRef(null);\n\n//   const audioContextRef = useRef(null);\n//   const gainNodeRef = useRef(null);\n//   const sourceRef = useRef(null);\n//   const controlTimeout = useRef(null);\n\n//   useEffect(() => {\n//     // Initialize Web Audio API\n//     audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n//     gainNodeRef.current = audioContextRef.current.createGain();\n//     gainNodeRef.current.gain.value = 1; // Default to 1x volume\n\n//     // Auto-hide controls after 5 seconds of inactivity\n//     const resetControlTimeout = () => {\n//       if (controlTimeout.current) clearTimeout(controlTimeout.current);\n//       setControlVisible(true);\n//       controlTimeout.current = setTimeout(() => setControlVisible(false), 5000);\n//     };\n\n//     document.addEventListener('mousemove', resetControlTimeout);\n//     document.addEventListener('keydown', resetControlTimeout);\n\n//     return () => {\n//       document.removeEventListener('mousemove', resetControlTimeout);\n//       document.removeEventListener('keydown', resetControlTimeout);\n//     };\n//   }, []);\n\n//   const connectAudioNode = () => {\n//     if (!sourceRef.current && playerRef.current && playerRef.current.getInternalPlayer()) {\n//       const audioSource = audioContextRef.current.createMediaElementSource(playerRef.current.getInternalPlayer());\n//       sourceRef.current = audioSource;\n//       audioSource.connect(gainNodeRef.current).connect(audioContextRef.current.destination);\n//     }\n//   };\n\n//   // Function to toggle play/pause\n//   const handlePlayPause = () => {\n//     setPlaying(!playing);\n//   };\n\n//   // Function to handle volume change\n//   const handleVolumeChange = (e) => {\n//     setVolume(parseFloat(e.target.value));\n//     gainNodeRef.current.gain.value = parseFloat(e.target.value) * boostVolume;\n//   };\n\n//   // Function to boost volume\n//   const handleBoostVolume = () => {\n//     const newBoost = boostVolume >= 2 ? 1 : boostVolume + 0.5;\n//     setBoostVolume(newBoost);\n//     gainNodeRef.current.gain.value = volume * newBoost;\n//   };\n\n//   // Function to handle aspect ratio\n//   const handleAspectRatio = (ratio) => {\n//     setAspectRatio(ratio);\n//   };\n\n//   // Function to handle full screen\n//   const handleFullScreen = () => {\n//     if (screenfull.isEnabled) {\n//       screenfull.toggle(containerRef.current);\n//     }\n//     setFullScreen(!fullScreen);\n//   };\n\n//   // Function to handle file selection\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFileUrl(URL.createObjectURL(file));\n//       extractSubtitles(file);\n//     }\n//   };\n\n//   // Function to handle progress changes\n//   const handleProgressChange = (played) => {\n//     setProgress(played.played * 100);\n//   };\n\n//   // Function to handle seek\n//   const handleSeek = (e) => {\n//     const seekTo = (e.target.value / 100) * playerRef.current.getDuration();\n//     playerRef.current.seekTo(seekTo, 'seconds');\n//     setProgress(e.target.value);\n//   };\n\n//   // Function to handle playback speed\n//   const handlePlaybackRate = (rate) => {\n//     setPlaybackRate(rate);\n//     playerRef.current.getInternalPlayer().playbackRate = rate;\n//   };\n\n//   // Extract subtitle tracks from video\n//   const extractSubtitles = (file) => {\n//     const video = document.createElement('video');\n//     video.src = URL.createObjectURL(file);\n//     console.log(URL.createObjectURL(file))\n//     video.onloadedmetadata = () => {\n//       const tracks = [];\n//       for (let i = 0; i < video.textTracks.length; i++) {\n//         tracks.push({\n//           label: video.textTracks[i].label || `Subtitle ${i + 1}`,\n//           index: i\n//         });\n//       }\n//       console.log(tracks)\n\n//       // setSubtitleTracks(tracks);\n//       // console.log(tracks);\n//       // setSelectedSubtitle(tracks[0].index); // Default to the first subtitle\n//       // video.textTracks[0].mode = 'showing'; // Show first subtitle\n//     };\n//   };\n\n//   // Change subtitle track\n//   const handleSubtitleChange = (e) => {\n//     const selectedTrackIndex = parseInt(e.target.value, 10);\n//     // setSelectedSubtitle(selectedTrackIndex);\n\n//     // Show selected subtitle and hide others\n//     const video = playerRef.current.getInternalPlayer();\n//     for (let i = 0; i < video.textTracks.length; i++) {\n//       video.textTracks[i].mode = i === selectedTrackIndex ? 'showing' : 'disabled';\n//     }\n//   };\n\n//   return (\n//     <div ref={containerRef} className=\"video-player-container\" onMouseMove={() => setControlVisible(true)}>\n//       {/* File Picker */}\n//       <div className=\"file-picker\">\n//         <input type=\"file\" accept=\"video/*\" onChange={handleFileChange} />\n//       </div>\n\n//       {/* Video Player */}\n//       {fileUrl && (\n//         <ReactPlayer\n//           ref={playerRef}\n//           url={fileUrl}\n//           playing={playing}\n//           volume={volume}\n//           playbackRate={playbackRate}\n//           onPlay={connectAudioNode} // Connect the audio node when playback starts\n//           onProgress={handleProgressChange}\n//           width=\"100%\"\n//           height={aspectRatio === '16:9' ? '56.25%' : aspectRatio === '4:3' ? '75%' : '100%'}\n//           controls={false}\n//         />\n//       )}\n\n//       {/* Controls */}\n//       {controlVisible && (\n//         <div className=\"controls\">\n//           <button className=\"control-button\" onClick={handlePlayPause}>\n//             {playing ? 'Pause' : 'Play'}\n//           </button>\n\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('16:9')}>16:9</button>\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('4:3')}>4:3</button>\n//           <button className=\"control-button\" onClick={() => handleAspectRatio('1:1')}>1:1</button>\n\n//           <div className=\"volume-container\">\n//             <input\n//               className=\"volume-slider\"\n//               type=\"range\"\n//               min=\"0\"\n//               max=\"1\"\n//               step=\"0.01\"\n//               value={volume}\n//               onChange={handleVolumeChange}\n//             />\n//             <button className=\"control-button boost-button\" onClick={handleBoostVolume}>Boost Volume ({boostVolume}x)</button>\n//           </div>\n\n//           <div className=\"playback-controls\">\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(1)}>1x</button>\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(1.5)}>1.5x</button>\n//             <button className=\"control-button\" onClick={() => handlePlaybackRate(2)}>2x</button>\n//           </div>\n\n//           <input\n//             className=\"progress-bar\"\n//             type=\"range\"\n//             min=\"0\"\n//             max=\"100\"\n//             step=\"0.1\"\n//             value={progress}\n//             onChange={handleSeek}\n//           />\n\n//           {/* Subtitle Selection */}\n//           {subtitleTracks.length > 0 && (\n//             <select value={selectedSubtitle} onChange={handleSubtitleChange} className=\"control-select\">\n//               {subtitleTracks.map((track) => (\n//                 <option key={track.index} value={track.index}>\n//                   {track.label}\n//                 </option>\n//               ))}\n//             </select>\n//           )}\n\n//           <button className=\"control-button\" onClick={handleFullScreen}>\n//             {fullScreen ? 'Exit Fullscreen' : 'Fullscreen'}\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\nimport './App.css'; // Add your styling here\n\nconst App = () => {\n  const videoNode = useRef(null);\n  const player = useRef(null);\n  const [fileUrl, setFileUrl] = useState('');\n  const [subtitleUrl, setSubtitleUrl] = useState(null); // For loading external subtitles\n  const [controlVisible, setControlVisible] = useState(true);\n\n  // Initialize player on component mount\n  useEffect(() => {\n    if (videoNode.current) {\n      player.current = videojs(videoNode.current, {\n        controls: true,\n        autoplay: false,\n        preload: 'auto',\n        fluid: true, // Make the player responsive\n        controlBar: {\n          fullscreenToggle: true,\n        },\n      });\n    }\n\n    // Handle subtitle changes (if external subtitles are loaded)\n    if (subtitleUrl && player.current) {\n      player.current.addRemoteTextTrack({\n        kind: 'subtitles',\n        src: subtitleUrl,\n        srclang: 'en',\n        label: 'English',\n        default: true, // Show subtitles by default\n      });\n    }\n\n    return () => {\n      if (player.current) {\n        player.current.dispose(); // Clean up player on component unmount\n      }\n    };\n  }, [subtitleUrl]);\n\n  // Function to handle file change\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const fileUrl = URL.createObjectURL(file);\n      setFileUrl(fileUrl);\n\n      // Check if file has embedded subtitles\n      player.current.src({ type: file.type, src: fileUrl });\n      player.current.on('loadedmetadata', () => {\n        const tracks = player.current.textTracks();\n        if (tracks.length === 0) {\n          // You can load an external subtitle file here if needed\n          setSubtitleUrl('/path/to/subtitle-file.vtt'); // Set the URL for the external subtitle\n        } else {\n          console.log('Embedded subtitles found:', tracks);\n        }\n      });\n    }\n  };\n\n  // Auto-hide controls after 5 seconds of inactivity\n  useEffect(() => {\n    const resetControlTimeout = () => {\n      setControlVisible(true);\n      setTimeout(() => setControlVisible(false), 5000);\n    };\n\n    document.addEventListener('mousemove', resetControlTimeout);\n    return () => {\n      document.removeEventListener('mousemove', resetControlTimeout);\n    };\n  }, []);\n\n  return (\n    <div className=\"video-player-container\">\n      {/* File Picker */}\n      <div className=\"file-picker\">\n        <input type=\"file\" accept=\"video/*\" onChange={handleFileChange} />\n      </div>\n\n      {/* Video Player */}\n      {fileUrl && (\n        <div data-vjs-player>\n          <video\n            ref={videoNode}\n            className=\"video-js vjs-big-play-centered\"\n            controls\n            preload=\"auto\"\n            width=\"640\"\n            height=\"360\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAO,4BAA4B;AACnC,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMQ,MAAM,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACAF,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,CAACQ,OAAO,EAAE;MACrBP,MAAM,CAACO,OAAO,GAAGb,OAAO,CAACK,SAAS,CAACQ,OAAO,EAAE;QAC1CC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE,MAAM;QACfC,KAAK,EAAE,IAAI;QAAE;QACbC,UAAU,EAAE;UACVC,gBAAgB,EAAE;QACpB;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIV,WAAW,IAAIH,MAAM,CAACO,OAAO,EAAE;MACjCP,MAAM,CAACO,OAAO,CAACO,kBAAkB,CAAC;QAChCC,IAAI,EAAE,WAAW;QACjBC,GAAG,EAAEb,WAAW;QAChBc,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE,IAAI,CAAE;MACjB,CAAC,CAAC;IACJ;IAEA,OAAO,MAAM;MACX,IAAInB,MAAM,CAACO,OAAO,EAAE;QAClBP,MAAM,CAACO,OAAO,CAACa,OAAO,CAAC,CAAC,CAAC,CAAC;MAC5B;IACF,CAAC;EACH,CAAC,EAAE,CAACjB,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMkB,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAIF,IAAI,EAAE;MACR,MAAMtB,OAAO,GAAGyB,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;MACzCrB,UAAU,CAACD,OAAO,CAAC;;MAEnB;MACAD,MAAM,CAACO,OAAO,CAACS,GAAG,CAAC;QAAEY,IAAI,EAAEL,IAAI,CAACK,IAAI;QAAEZ,GAAG,EAAEf;MAAQ,CAAC,CAAC;MACrDD,MAAM,CAACO,OAAO,CAACsB,EAAE,CAAC,gBAAgB,EAAE,MAAM;QACxC,MAAMC,MAAM,GAAG9B,MAAM,CAACO,OAAO,CAACwB,UAAU,CAAC,CAAC;QAC1C,IAAID,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;UACvB;UACA5B,cAAc,CAAC,4BAA4B,CAAC,CAAC,CAAC;QAChD,CAAC,MAAM;UACL6B,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,MAAM,CAAC;QAClD;MACF,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACAvC,SAAS,CAAC,MAAM;IACd,MAAM4C,mBAAmB,GAAGA,CAAA,KAAM;MAChC7B,iBAAiB,CAAC,IAAI,CAAC;MACvB8B,UAAU,CAAC,MAAM9B,iBAAiB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAClD,CAAC;IAED+B,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEH,mBAAmB,CAAC;IAC3D,OAAO,MAAM;MACXE,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEJ,mBAAmB,CAAC;IAChE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEvC,OAAA;IAAK4C,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBAErC7C,OAAA;MAAK4C,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1B7C,OAAA;QAAOgC,IAAI,EAAC,MAAM;QAACc,MAAM,EAAC,SAAS;QAACC,QAAQ,EAAEtB;MAAiB;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC,EAGL9C,OAAO,iBACNL,OAAA;MAAK,uBAAe;MAAA6C,QAAA,eAClB7C,OAAA;QACEoD,GAAG,EAAEjD,SAAU;QACfyC,SAAS,EAAC,gCAAgC;QAC1ChC,QAAQ;QACRE,OAAO,EAAC,MAAM;QACduC,KAAK,EAAC,KAAK;QACXC,MAAM,EAAC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjD,EAAA,CA/FID,GAAG;AAAAsD,EAAA,GAAHtD,GAAG;AAiGT,eAAeA,GAAG;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}